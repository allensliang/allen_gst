{"version":3,"sources":["components/navbar.tsx","components/gst_list.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GSTNavbar","Navbar","color","expand","NavbarBrand","role","aria-label","NavLink","href","Component","GSTListRow","counter","cb_add","cb_sub","cb_del","username","count","Button","onClick","_id","to","GSTList","state","counters","componentDidMount","console","log","axios","get","then","response","setState","data","catch","err","message","alert","deleteCounter","id","delete","res","filter","el","addCount","post","subCount","counterList","map","counter_","Table","this","App","className","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.d266f3b1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n    Navbar,\r\n    NavbarBrand,\r\n    NavLink\r\n} from \"reactstrap\";\r\n\r\nexport default class GSTNavbar extends Component<React.HTMLAttributes<HTMLDivElement>> {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar\r\n                    color=\"light\"\r\n                    expand=\"md\"\r\n                >\r\n                    <NavbarBrand>\r\n                        <strong>\r\n                            GST<span role=\"img\" aria-label=\"shit\">ðŸ’©</span>\r\n                        </strong>\r\n                    </NavbarBrand>\r\n                    <NavLink href=\"/\"> Counters </NavLink>\r\n                    <NavLink href=\"/create\"> New Geed </NavLink>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport { Link } from 'react-router-dom';\r\nimport '../styles/gst_list.css'\r\n\r\nimport {\r\n    Table,\r\n    Button\r\n} from 'reactstrap';\r\n\r\n/* ************************* GSTListRow FC ************************* */\r\ninterface GST_LR_Props {\r\n    counter: any,\r\n    cb_add: Function,\r\n    cb_sub: Function,\r\n    cb_del: Function\r\n}\r\n\r\nexport const GSTListRow: React.FC<GST_LR_Props> = ({\r\n    counter,\r\n    cb_add,\r\n    cb_sub,\r\n    cb_del\r\n}) => (\r\n        <tr>\r\n            <td>{counter.username}</td>\r\n            <td>\r\n                <span>\r\n                    {counter.count}\r\n                    {' '}\r\n                    <Button\r\n                        color=\"primary\"\r\n                        onClick={() => cb_add(counter._id)}\r\n                    >\r\n                        +\r\n                    </Button>\r\n                    {' '}\r\n                    <Button\r\n                        color=\"danger\"\r\n                        onClick={() => cb_sub(counter._id)}\r\n                    >\r\n                        -\r\n                </Button>\r\n                </span>\r\n            </td>\r\n            <td>\r\n                <span>\r\n                    <Button\r\n                        color=\"link\"\r\n                        onClick={() => cb_del(counter._id)}\r\n                    >\r\n                        delete\r\n                    </Button>|\r\n                    <Button color=\"link\">\r\n                        <Link to={\"/edit/\" + counter._id}>\r\n                            edit\r\n                        </Link>\r\n                    </Button>\r\n                </span>\r\n            </td>\r\n        </tr>\r\n    );\r\n\r\n/* **************************** GSTList **************************** */\r\ninterface Props { /*none*/ }\r\ninterface State {\r\n    counters: Array<any>\r\n}\r\n\r\nexport default class GSTList extends Component<Props, State> {\r\n    state = {\r\n        counters: []\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        \r\n        console.log(\"before show list\")\r\n        axios.get('http://54.218.71.105/counters/')\r\n            .then(response => {\r\n                this.setState({\r\n                    counters: response.data\r\n                });\r\n                console.log(\"show list\");\r\n            })\r\n            .catch(err => {\r\n                if (err.message === 'Network Error'){\r\n                    alert('Server probably isn\\'t on \\n' + err)\r\n                } else {\r\n                    alert(err);\r\n                }\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    deleteCounter = (id: String) => {\r\n        axios.delete('http://54.218.71.105/counters/' + id)\r\n            .then(res => {\r\n                console.log(res.data);\r\n                this.setState({\r\n                    counters: this.state.counters.filter((el: any) => el._id !== id)\r\n                })\r\n            });\r\n    }\r\n\r\n    addCount = (id: String) => {\r\n        axios.post('http://54.218.71.105/counters/add/' + id)\r\n            .then(res => {\r\n                console.log(res.data);\r\n                // update our state\r\n                this.componentDidMount();\r\n            });\r\n\r\n    }\r\n\r\n    subCount = (id: String) => {\r\n        axios.post('http://54.218.71.105/counters/subtract/' + id)\r\n            .then(res => {\r\n                console.log(res.data);\r\n\r\n                console.log(\"test\");\r\n                // update our state\r\n                this.componentDidMount();\r\n            });\r\n    }\r\n\r\n    // for rendering our list of counters\r\n    counterList = () => {\r\n        return this.state.counters.map(counter_ => {\r\n            return (\r\n                <GSTListRow\r\n                    counter={counter_}\r\n                    cb_add={this.addCount}\r\n                    cb_sub={this.subCount}\r\n                    cb_del={this.deleteCounter}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <h3>Current Offenders</h3>\r\n                <Table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Count</th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.counterList()}\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\r\n\r\nimport GSTNavbar from \"./components/navbar\";\r\nimport GSTList from \"./components/gst_list\";\r\nimport CreateCounter from \"./components/create_counter\";\r\nimport EditCounter from \"./components/edit_counter\";\r\n\r\n// We implement the React.HTMLAttributes<HTMLDivElement> interface so we can give\r\n// our divs className properties\r\nexport default class App extends Component<React.HTMLAttributes<HTMLDivElement>> {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Router>\r\n        <div className=\"container\">\r\n         <GSTNavbar />\r\n          <br />\r\n          <div>\r\n            <strong>\r\nf12ffdfd\r\n            </strong>\r\n          </div>\r\n          <br />\r\n<Route path=\"/allen_gst/\" exact component={GSTList} />\r\n<strong>step2</strong>\r\n        </div>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// import bootstrap\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}